GroupingEx
scheme testGroupingEx =
extend GroupingEx with 
class
  value
    An : Person = "Anna",
    He : Person = "Henrik",
    Fr : Person = "Frederik",
    Me : Person = "Mette",
    Ha : Person = "Hans",
    Jo : Person = "Joachim",
    Pe : Person = "Peter",

    thePersons : Group = {An, He, Fr, Me, Ha, Jo},

    leftPair : Person >< Person = (An, ""),
    emptyPair : Person >< Person = ("", ""),
    rightPair : Person >< Person = ("", An),
    wfPair : Person >< Person = (An, He),

    wfRelation : Relation = {(An, He), (An, Fr), (He, Fr), 
      (An, Me), (Ha, Me), 
      (Ha, Jo), (Me, Jo)},

    badRelation : Relation = {emptyPair, (An, He)},

    wfGrouping : Grouping = {{Ha, He}, {Me, Fr}, {Jo, Pe, An}},
    badGrouping : Grouping = {{An, He}, {Me, Fr}}

  test_case
  -- GroupingBasics tests
    [ARE_FRIENDS] areFriends(An, He, wfRelation) = true,
    [NOT_FRIEDS] areFriends(An, Jo, wfRelation) = false,
    [WF_PAIR] validPair(wfPair) = true,
    [EMPTY_PAIR] validPair(emptyPair) = false,
    [RIGHT_PAIR] validPair(rightPair) = false,
    [LEFT_PAIR] validPair(leftPair) = false,
    [WF_RELATION] isFriendsRelation(wfRelation) = true,
    [BAD_RELATION] isFriendsRelation(badRelation) = false,
    [MANUAL_WF_GROUPING] isCorrectGrouping(wfGrouping, thePersons, wfRelation) = true,
    [MANUAL_BAD_GROUPING] isCorrectGrouping(badGrouping, thePersons, wfRelation) = false,
  -- GroupingEx tests
    [FRIENDS_IN_GROUP] hasFriendsInGroup(An, {He}, wfRelation) = true,
    [NO_FRIENDS_IN_GROUP] hasFriendsInGroup(An, {Jo}, wfRelation) = false,
    [FIND_GROUPS] findGroups(An, {{Jo}}, wfRelation) ~= {},
    [NO_FIND_GROUPS] findGroups(An, {{He}}, wfRelation) = {},
    [DIVIDE] isCorrectGrouping(divide(thePersons, wfRelation), thePersons, wfRelation) = true
    
end

